// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ScreenTemperature.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221211204014_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("ScreenTemperature.Entities.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("ScreenTemperature.Entities.KeyBinding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Alt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Control")
                        .HasColumnType("INTEGER");

                    b.Property<char>("Key")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Shift")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("KeyBinding");
                });

            modelBuilder.Entity("ScreenTemperature.Entities.ScreenConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DevicePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("ScreenConfig");
                });

            modelBuilder.Entity("ScreenTemperature.Entities.KeyBinding", b =>
                {
                    b.HasOne("ScreenTemperature.Entities.Configuration", "Configuration")
                        .WithOne("KeyBinding")
                        .HasForeignKey("ScreenTemperature.Entities.KeyBinding", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("ScreenTemperature.Entities.ScreenConfig", b =>
                {
                    b.HasOne("ScreenTemperature.Entities.Configuration", "Configuration")
                        .WithMany("Configs")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("ScreenTemperature.Entities.Configuration", b =>
                {
                    b.Navigation("Configs");

                    b.Navigation("KeyBinding")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
